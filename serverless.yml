service: myServerless
frameworkVersion: '2'

custom:
  localstack:
    debug: true
    stages:
      - local

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverless-admin
  region: us-west-2
  memorySize: 1024
  timeout: 300
  stage: ${opt:stage, self:provider.stage, "local"}
  vpc:
    securityGroupIds:
      - ${ssm:/${opt:stage, self:provider.stage}/lambda/common/VPC_SECURITY_GROUP_ID}
    subnetIds:
      - ${ssm:/${opt:stage, self:provider.stage}/lambda/common/VPC_SUBNET_ID}
      - ${ssm:/${opt:stage, self:provider.stage}/lambda/common/VPC_SUBNET_ID2}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - 'sqs:*'
        - 's3:*'
        - 'sns:*'
        - dynamodb:BatchWriteItem
      Resource: "*"
  environment:
    THUMBNAIL_SIZE: 100
  deploymentBucket:
    name: dilum-serverless-deployment-bucket

plugins:
  #- serverless-offline
  - serverless-localstack
  - serverless-deployment-bucket
package:
  excludeDevDependencies: true
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
#    - node_modules/**
    - buckets/**
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: src/handler.hello
    name: ${opt:stage, self:provider.stage, "dev"}-${self:service}
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - homeWorkerQueue
              - Arn
        # batchSize: 10
        # maximumBatchingWindow: 10 # optional, minimum is 0 and the maximum is 300 (seconds)
        # enabled: true

# CloudFormation resource templates
resources:
  Resources:
    homeUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:stage, self:provider.stage, "dev"}-dilum-home-images
        NotificationConfiguration:
          QueueConfigurations:
            - Queue: !GetAtt homeWorkerQueue.Arn
              Event: s3:ObjectCreated:Put
      DependsOn:
        - homeWorkerQueue
        - HomeSQSPolicy
    homeUploadThumbBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:stage, self:provider.stage, "dev"}-dilum-home-thumb-images
    homeWorkerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, self:provider.stage, "dev"}-home-workerQueue
        VisibilityTimeout: 400
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - homeWorkerDLQ
              - Arn
          maxReceiveCount: 5
    HomeSQSPolicy:
      Type: 'AWS::SQS::QueuePolicy'
      DependsOn:
        - homeWorkerQueue
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Resource: "*"
              Condition:
                ArnLike:
                  aws:SourceArn: "arn:aws:s3:::*"
              Action: 'SQS:*'
        Queues:
          - Ref: homeWorkerQueue
    homeWorkerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, self:provider.stage, "dev"}-home-workerDlq
    homeDynamoDb:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: ${opt:stage, self:provider.stage, "dev"}-home-images
        AttributeDefinitions:
          - AttributeName: image
            AttributeType: S
        KeySchema:
          - AttributeName: image
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
