service: myServerless 
frameworkVersion: '2'

custom:
  localstack:
    debug: true
    stages:
      - local

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverless-admin
  region: us-west-2
  memorySize: 1024
  timeout: 300
  stage: ${opt:stage, self:provider.stage, "local"}
  vpc:
    securityGroupIds:
      - ${ssm:/${opt:stage, self:provider.stage}/lambda/common/VPC_SECURITY_GROUP_ID}
    subnetIds:
      - ${ssm:/${opt:stage, self:provider.stage}/lambda/common/VPC_SUBNET_ID}
      - ${ssm:/${opt:stage, self:provider.stage}/lambda/common/VPC_SUBNET_ID2}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - 'sqs:*'
        - 's3:*'
        - 'sns:*'
        - dynamodb:BatchWriteItem
      Resource: "*"
  environment:
    THUMBNAIL_SIZE: 100

plugins:
  - serverless-offline
  - serverless-localstack
package:
  excludeDevDependencies: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # testS3:
  #   handler: handler.hello
  #   name: dev-test-s3-local
  #   events:
  #     - s3:
  #         bucket: testBucketS3LocalTest
  #         event: s3:ObjectCreated:Put
  #         existing: true
  # testApi:
  #   handler: handler.hello
  #   events:
  #   - http:
  #     path: helloo
  #     method: get
  hello:
    handler: handler.hello
    name: ${opt:stage, self:provider.stage, "dev"}-${self:service}
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - homeWorkerQueue
              - Arn
        # batchSize: 10
        # maximumBatchingWindow: 10 # optional, minimum is 0 and the maximum is 300 (seconds)
        # enabled: true

# CloudFormation resource templates
resources:
  Resources:
    homeUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:stage, self:provider.stage, "dev"}-dilum-home-images
        NotificationConfiguration:
          QueueConfigurations:
            - Queue: !GetAtt homeWorkerQueue.Arn
              Event: s3:ObjectCreated:Put
      DependsOn:
        - homeWorkerQueue
        - HomeSQSPolicy
    homeWorkerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, self:provider.stage, "dev"}-home-workerQueue
        VisibilityTimeout: 400
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - homeWorkerDLQ
              - Arn
          maxReceiveCount: 5
    HomeSQSPolicy:
      Type: 'AWS::SQS::QueuePolicy'
      DependsOn:
        - homeWorkerQueue
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Resource: "*"
              Condition:
                ArnLike:
                  aws:SourceArn: "arn:aws:s3:::*"
              Action: 'SQS:*'
        Queues:
          - Ref: homeWorkerQueue
    homeWorkerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, self:provider.stage, "dev"}-home-workerDlq
    
    # homeDynamoDb:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Delete
    #   Properties:
    #     TableName: ${opt:stage, self:provider.stage, "dev"}-home-images
    #     AttributeDefinitions:
    #       - AttributeName: image
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: image
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    # homeWorkerQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${opt:stage, self:provider.stage, "dev"}-home-workerQueue
    #     RedrivePolicy:
    #       deadLetterTargetArn:
    #         Fn::GetAtt:
    #           - WorkerDLQ
    #           - Arn
    #       maxReceiveCount: 5
    # homeWorkerDLQ:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${opt:stage, self:provider.stage, "dev"}-home-workerDlq
